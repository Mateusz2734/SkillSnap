// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserRole string

const (
	UserRoleUser  UserRole = "user"
	UserRoleAdmin UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Category struct {
	Category string
}

type Offer struct {
	CreatedAt   pgtype.Timestamp
	OfferID     int32
	UserID      int32
	Skill       string
	Description string
}

type Report struct {
	CreatedAt       pgtype.Timestamp
	ReportID        int32
	ReportingUserID int32
	ReportedUserID  pgtype.Int4
	ReportedOfferID pgtype.Int4
	Reason          string
	Description     string
	Status          string
}

type ReportReason struct {
	Reason string
}

type Review struct {
	CreatedAt       pgtype.Timestamp
	ReviewID        int32
	ReviewingUserID int32
	ReviewedUserID  int32
	StarCount       int32
	Review          string
}

type Skill struct {
	Skill string
}

type SkillCategory struct {
	Skill    string
	Category string
}

type User struct {
	CreatedAt       pgtype.Timestamp
	UserID          int32
	Username        string
	DiscordUsername pgtype.Text
	PasswordHash    string
	Role            UserRole
}
