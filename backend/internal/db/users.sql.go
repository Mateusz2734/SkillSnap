// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addAdmin = `-- name: AddAdmin :one
INSERT INTO admins (user_id)
VALUES
    ($1) RETURNING user_id
`

// //////////////// ADMINS ////////////////
func (q *Queries) AddAdmin(ctx context.Context, userID pgtype.Int4) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, addAdmin, userID)
	var user_id pgtype.Int4
	err := row.Scan(&user_id)
	return user_id, err
}

const addUser = `-- name: AddUser :one
INSERT INTO users (username, discord_username, password_hash)
VALUES
    ($1, $2, $3) RETURNING user_id, username, discord_username
`

type AddUserParams struct {
	Username        string
	DiscordUsername pgtype.Text
	PasswordHash    string
}

type AddUserRow struct {
	UserID          int32
	Username        string
	DiscordUsername pgtype.Text
}

// //////////////// USERS ////////////////
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (AddUserRow, error) {
	row := q.db.QueryRow(ctx, addUser, arg.Username, arg.DiscordUsername, arg.PasswordHash)
	var i AddUserRow
	err := row.Scan(&i.UserID, &i.Username, &i.DiscordUsername)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM
    admins
WHERE
    user_id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, userID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteAdmin, userID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM 
    users 
WHERE 
    user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getAdmins = `-- name: GetAdmins :many
SELECT
    user_id
FROM admins
`

func (q *Queries) GetAdmins(ctx context.Context) ([]pgtype.Int4, error) {
	rows, err := q.db.Query(ctx, getAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Int4
	for rows.Next() {
		var user_id pgtype.Int4
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT 
    user_id, username, discord_username
FROM users
WHERE user_id = $1
`

type GetUserByIdRow struct {
	UserID          int32
	Username        string
	DiscordUsername pgtype.Text
}

func (q *Queries) GetUserById(ctx context.Context, userID int32) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(&i.UserID, &i.Username, &i.DiscordUsername)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT 
    user_id, username, discord_username
FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	UserID          int32
	Username        string
	DiscordUsername pgtype.Text
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(&i.UserID, &i.Username, &i.DiscordUsername)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    user_id, username, discord_username  
FROM users
`

type GetUsersRow struct {
	UserID          int32
	Username        string
	DiscordUsername pgtype.Text
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.UserID, &i.Username, &i.DiscordUsername); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
