// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: stats.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAverageStarsByUser = `-- name: GetAverageStarsByUser :one
SELECT
    AVG(star_count)
FROM reviews
WHERE
    reviewed_user_id = $1
`

func (q *Queries) GetAverageStarsByUser(ctx context.Context, reviewedUserID int32) (float64, error) {
	row := q.db.QueryRow(ctx, getAverageStarsByUser, reviewedUserID)
	var avg float64
	err := row.Scan(&avg)
	return avg, err
}

const getOfferCount = `-- name: GetOfferCount :one
SELECT
    COUNT(*)
FROM offers
`

func (q *Queries) GetOfferCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getOfferCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOfferCountByCategory = `-- name: GetOfferCountByCategory :one
SELECT COUNT(skill_categories.category)
FROM offers
INNER JOIN skills ON offers.skill = skills.skill
INNER JOIN skill_categories ON skills.skill = skill_categories.skill
GROUP BY skill_categories.category
`

func (q *Queries) GetOfferCountByCategory(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getOfferCountByCategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOfferCountBySkill = `-- name: GetOfferCountBySkill :one
SELECT COUNT(*)
FROM offers
GROUP BY skill
`

func (q *Queries) GetOfferCountBySkill(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getOfferCountBySkill)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOfferCountByUser = `-- name: GetOfferCountByUser :one
SELECT
    COUNT(*)
FROM offers
WHERE
    user_id = $1
`

func (q *Queries) GetOfferCountByUser(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getOfferCountByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getReportCountByUser = `-- name: GetReportCountByUser :one
SELECT
    COUNT(*)
FROM reports
WHERE
    reported_user_id = $1
`

func (q *Queries) GetReportCountByUser(ctx context.Context, reportedUserID pgtype.Int4) (int64, error) {
	row := q.db.QueryRow(ctx, getReportCountByUser, reportedUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getReviewCountByStars = `-- name: GetReviewCountByStars :one
SELECT COUNT(*)
FROM reviews
GROUP BY star_count
`

func (q *Queries) GetReviewCountByStars(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getReviewCountByStars)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getReviewCountByUser = `-- name: GetReviewCountByUser :one
SELECT
    COUNT(*)
FROM reviews
WHERE reviewing_user_id = $1
`

func (q *Queries) GetReviewCountByUser(ctx context.Context, reviewingUserID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getReviewCountByUser, reviewingUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserCount = `-- name: GetUserCount :one
SELECT
    COUNT(*)
FROM users
`

func (q *Queries) GetUserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
