// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: reports.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addReason = `-- name: AddReason :one
INSERT INTO report_reasons (reason)
VALUES
    ($1) RETURNING reason
`

func (q *Queries) AddReason(ctx context.Context, reason string) (string, error) {
	row := q.db.QueryRow(ctx, addReason, reason)
	err := row.Scan(&reason)
	return reason, err
}

const addReport = `-- name: AddReport :one
INSERT INTO reports (reporting_user_id, reported_user_id, reported_offer_id, reason, description, status)
VALUES
    ($1, $2, $3, $4, $5, $6) RETURNING created_at, report_id, reporting_user_id, reported_user_id, reported_offer_id, reason, description, status
`

type AddReportParams struct {
	ReportingUserID int32
	ReportedUserID  pgtype.Int4
	ReportedOfferID pgtype.Int4
	Reason          string
	Description     string
	Status          string
}

// //////////////// REPORTS ////////////////
func (q *Queries) AddReport(ctx context.Context, arg AddReportParams) (Report, error) {
	row := q.db.QueryRow(ctx, addReport,
		arg.ReportingUserID,
		arg.ReportedUserID,
		arg.ReportedOfferID,
		arg.Reason,
		arg.Description,
		arg.Status,
	)
	var i Report
	err := row.Scan(
		&i.CreatedAt,
		&i.ReportID,
		&i.ReportingUserID,
		&i.ReportedUserID,
		&i.ReportedOfferID,
		&i.Reason,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const deleteReason = `-- name: DeleteReason :exec
DELETE FROM
    report_reasons
WHERE
    reason = $1
`

func (q *Queries) DeleteReason(ctx context.Context, reason string) error {
	_, err := q.db.Exec(ctx, deleteReason, reason)
	return err
}

const deleteReport = `-- name: DeleteReport :exec
DELETE FROM
    reports
WHERE
    report_id = $1
`

func (q *Queries) DeleteReport(ctx context.Context, reportID int32) error {
	_, err := q.db.Exec(ctx, deleteReport, reportID)
	return err
}

const getReasons = `-- name: GetReasons :many
SELECT
    reason
FROM report_reasons
`

// //////////////// REASONS ////////////////
func (q *Queries) GetReasons(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getReasons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var reason string
		if err := rows.Scan(&reason); err != nil {
			return nil, err
		}
		items = append(items, reason)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportById = `-- name: GetReportById :one
SELECT
    created_at, report_id, reporting_user_id, reported_user_id, reported_offer_id, reason, description, status
FROM reports
WHERE
    report_id = $1
`

func (q *Queries) GetReportById(ctx context.Context, reportID int32) (Report, error) {
	row := q.db.QueryRow(ctx, getReportById, reportID)
	var i Report
	err := row.Scan(
		&i.CreatedAt,
		&i.ReportID,
		&i.ReportingUserID,
		&i.ReportedUserID,
		&i.ReportedOfferID,
		&i.Reason,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const getReports = `-- name: GetReports :many
SELECT
    created_at, report_id, reporting_user_id, reported_user_id, reported_offer_id, reason, description, status
FROM reports
`

func (q *Queries) GetReports(ctx context.Context) ([]Report, error) {
	rows, err := q.db.Query(ctx, getReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.CreatedAt,
			&i.ReportID,
			&i.ReportingUserID,
			&i.ReportedUserID,
			&i.ReportedOfferID,
			&i.Reason,
			&i.Description,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsByReason = `-- name: GetReportsByReason :many
SELECT
    created_at, report_id, reporting_user_id, reported_user_id, reported_offer_id, reason, description, status
FROM reports
WHERE
    reason = $1
`

func (q *Queries) GetReportsByReason(ctx context.Context, reason string) ([]Report, error) {
	rows, err := q.db.Query(ctx, getReportsByReason, reason)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.CreatedAt,
			&i.ReportID,
			&i.ReportingUserID,
			&i.ReportedUserID,
			&i.ReportedOfferID,
			&i.Reason,
			&i.Description,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsByReportedOffer = `-- name: GetReportsByReportedOffer :many
SELECT
    created_at, report_id, reporting_user_id, reported_user_id, reported_offer_id, reason, description, status
FROM reports
WHERE
    reported_offer_id = $1
`

func (q *Queries) GetReportsByReportedOffer(ctx context.Context, reportedOfferID pgtype.Int4) ([]Report, error) {
	rows, err := q.db.Query(ctx, getReportsByReportedOffer, reportedOfferID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.CreatedAt,
			&i.ReportID,
			&i.ReportingUserID,
			&i.ReportedUserID,
			&i.ReportedOfferID,
			&i.Reason,
			&i.Description,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportsByReportedUser = `-- name: GetReportsByReportedUser :many
SELECT
    created_at, report_id, reporting_user_id, reported_user_id, reported_offer_id, reason, description, status
FROM reports
WHERE
    reported_user_id = $1
`

func (q *Queries) GetReportsByReportedUser(ctx context.Context, reportedUserID pgtype.Int4) ([]Report, error) {
	rows, err := q.db.Query(ctx, getReportsByReportedUser, reportedUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.CreatedAt,
			&i.ReportID,
			&i.ReportingUserID,
			&i.ReportedUserID,
			&i.ReportedOfferID,
			&i.Reason,
			&i.Description,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
